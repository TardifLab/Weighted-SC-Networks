#!/bin/bash
#
# MICA BIDS structural processing
#
#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "
\033[38;5;141mCOMMAND:\033[0m
   `basename $0`


\033[38;5;141mARGUMENTS:\033[0m
\t\033[38;5;197m-sub\033[0m 	          : Subject identification
\t\033[38;5;197m-out\033[0m 	          : Output directory for the processed files <derivatives>.
\t\033[38;5;197m-bids\033[0m 	          : Path to BIDS directory
\t\033[38;5;197m-ses\033[0m 	          : OPTIONAL flag that indicates the session name (default = ses-pre)

   Flags for basic stages of processing:
\t\033[38;5;197m-all\033[0m              : Performs ALL stages of micapipe processing
\t\033[38;5;197m-proc_structural\033[0m  : Volumetric processing
\t\033[38;5;197m-proc_freesurfer\033[0m  : Freesurfer recon-all processing

   Flags for second stages of structural processing:
\t\033[38;5;197m-post_structural\033[0m  : Post structural volumetric processing
\t\t\t      ( Requires: -proc_structural and -proc_freesurfer )
\t\033[38;5;197m-proc_dwi\033[0m         : DWI-Diffusion weighted images processing with MRtrix3
\t\t\t      ( Requires: -proc_structural and -proc_freesurfer )
\t\033[38;5;197m-proc_rsfmri\033[0m      : Resting state Funtional MRI processing and functional connectome
\t\t\t      ( Requires: -proc_structural and -proc_freesurfer )

   Flags for third stage, the  connectome generation:
\t\033[38;5;197m-SC\033[0m               : Structural connectome generation
\t\t\t      ( Requires: -proc_dwi, -post_structural)
\t\033[38;5;197m-MPC\033[0m              : Microstructural profiles and covariance analysis
\t\t\t      ( Requires: -proc_freesurfer and -post_structural )
\t\033[38;5;197m-GD\033[0m               : Geodesic distance analysis
\t\t\t      ( Requires: -proc_freesurfer and -post_structural )
\t\033[38;5;197m-Morphology\033[0m       : Cortical morphology analysis
\t\t\t      ( Requires: -proc_freesurfer and -post_structural )

\033[38;5;141mOPTIONAL ARGUMENTS FOR SUBMODULES:\033[0m
   \033[38;5;197m-proc_freesurfer\033[0m
\t\033[38;5;120m-freesurfer_dir\033[0m      : If freesurfer has been performed, it will copy the files to <out>/sub-<sub>/<ses>/proc_struct/surfaces/<sub>

   \033[38;5;197m-proc_dwi\033[0m
\t\033[38;5;120m-dwi_main\033[0m            : Path to DWI with N number of directions and b0. If used, it will overwrite the defaults.
\t\t\t        ( default = <bids>/sub-<sub>/<ses>/dwi/dwi/*acq-b*_dir-*_dwi.nii* )
\t\033[38;5;120m-dwi_rpe\033[0m             : DWI b0 image(s) with phase reversal encoding. If used, it will overwrite the defaults.
\t\t\t        ( default = <bids>/sub-<sub>/<ses>/dwi/dwi/*_<ses>_acq-PA_dir-*_dwi.nii* )
\t\033[38;5;120m-unring\033[0m              : Perform unringing using mrdegibbs from mrtrix3 (This is an optional processing stage)

   \033[38;5;197m-proc_rsfmri\033[0m
\t\033[38;5;120m-topupConfig\033[0m         : Path to specified config file for topup ( distorsion correction; eg. file.cnf )
\t\033[38;5;120m-icafixTraining\033[0m      : Path to specified ICA-FIX training file for nuisance signal regression ( file.RData )
\t\t\t         ( default = \$MICAPIPE/functions/MICAMTL_training_15HC_15PX.RData )
\t\033[38;5;120m-mainScanRun\033[0m         : If multiple resting-state scans exist in the BIDS rawdata,
\t\t\t         you must specify which scan to process ( e.g. '1' )
\t\033[38;5;120m-phaseReversalRun\033[0m    : If multiple phase encoding files exist in the BIDS rawdata (main phase),
\t\t\t         you must specify which one to process ( e.g. '1' )

   \033[38;5;197m-SC\033[0m
\t\033[38;5;120m-tracts <numeric>\033[0m    : Number of streamlines, where 'M' stands for millions (default=40M)
\t\033[38;5;120m-autoTract\033[0m           : Automatic tractogram segmentation (This is an optional procedure)

   \033[38;5;197m-MPC\033[0m
\t\033[38;5;120m-microstructural_img\033[0m : Path to scan on which MPC will be performed ( ./img.nii.gz )
\t\t\t        If left blank or omitted, defaults to using qT1 identified through BIDS directory structure
\t\033[38;5;120m-microstructural_lta\033[0m : Path to transformation lta from microstructural scan space to native freesurfer space ( ./file.lta )
\t\t\t        If left blank or omitted, registration will be computed in the script.
\t\t\t        Note that there is currently no built-in mechanism to verify the accuracy of this registration!


\033[38;5;141mOPTIONS:\033[0m
\t\033[38;5;197m-h|-help\033[0m          : Print help
\t\033[38;5;197m-force\033[0m 	          : WARNING this will overwrite the subject directory.
\t\033[38;5;197m-quiet\033[0m 	          : Do not print comments
\t\033[38;5;197m-nocleanup\033[0m 	  : Do not delete temporal directory at script completion.
\t\033[38;5;197m-threads\033[0m          : Number of threads (Default is 6)
\t\033[38;5;197m-tmpDir\033[0m           : Specify location of temporary directory <path> (Default is /tmp).
\t\033[38;5;197m-atlas\033[0m          : Specify the parcellations separated by a blank space and double quotes (Default is /tmp).
\t\033[38;5;197m-mica\033[0m 	          : Only for MICA local processing
\t\033[38;5;197m-qsub\033[0m 	          : Only for MICA network processing (SGE mica.q)
\t\033[38;5;197m-qall\033[0m 	          : Only for MICA network processing (SGE all.q)


\033[38;5;141mUSAGE:\033[0m
    \033[38;5;141m`basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <outputDirectory> \033[38;5;197m-bids\033[0m <BIDS-directory> \033[38;5;197m-proc_structural\033[0m
    \033[38;5;141m`basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <outputDirectory> \033[38;5;197m-bids\033[0m <BIDS-directory> \033[38;5;197m-proc_freesurfer\033[0m
    \033[38;5;141m`basename $0`\033[0m  \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <outputDirectory> \033[38;5;197m-bids\033[0m <BIDS-directory> \033[38;5;197m-proc_freesurfer\033[0m \033[38;5;197m-proc_structural\033[0m


\033[38;5;141mDEPENDENCIES:\033[0m
    > Freesurfer  6.0     (https://surfer.nmr.mgh.harvard.edu/)
    > FSL         6.0     (https://fsl.fmrib.ox.ac.uk/fsl/fslwiki)
    > AFNI        20.3.03 (https://afni.nimh.nih.gov/download)
    > MRtrix3     3.0.0   (https://www.mrtrix.org)
    > ANTs        2.3.3   (https://github.com/ANTsX/ANTs)
    > workbench   1.4.2
    > python      3.7.6
    > R           3.6.3
    > FIX (FMRIB's ICA-based Xnoiseifier) v1.06


McGill University, MNI, MICA-lab, May-September 2020
https://github.com/MICA-MNI/micapipe
http://mica-mni.github.io/
"
}

# Check MICAPIPE
if [ -z "${MICAPIPE}" ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE must be define in your enviroment\033[0m
           TRY: export MICAPIPE=<github_Directory>/micasoft\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

if [ ! -f ${MICAPIPE}/functions/utilities.sh ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE is defined, but the PATH is wrong,
           it should match /micasoft directory\033[0m
           CHECK PATH to MICAPIPE:
           $MICAPIPE\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

# Source utilities functions from MICAPIPE
source ${MICAPIPE}/functions/utilities.sh

# -----------------------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -sub)
    id=$2
    shift;shift
  ;;
  -out)
    out=$2
    shift;shift
  ;;
  -bids)
    BIDS=$2
    shift;shift
  ;;
  -all)
    ALL=TRUE
    shift
  ;;
  -post)
    post=TRUE
    shift
  ;;
  -ses)
    SES=$2
    shift;shift
  ;;
  -proc_structural)
    procVOL=TRUE
    shift
  ;;
  -proc_freesurfer)
    procFS=TRUE
    shift
  ;;
  -proc_dwi)
    procDWI=TRUE
    shift
  ;;
  -proc_rsfmri)
    procfMRI=TRUE
    shift
  ;;
  -topupConfig)
    configFileInput=TRUE
    configFile=$2
    shift;shift
  ;;
  -icafixTraining)
    icaFileInput=TRUE
    trainingFile=$2
    shift;shift
  ;;
  -mainScanRun)
    specMainScan=TRUE
    thisMainScan=$2
    shift;shift
  ;;
  -phaseReversalRun)
    specPhase=TRUE
    thisPhase=$2
    shift;shift
  ;;
  -post_structural)
    postVOL=TRUE
    shift
  ;;
  -SC)
    postDWI=TRUE
    shift
  ;;
  -GD)
    postGD=TRUE
    shift
  ;;
  -Morphology)
    postMorph=TRUE
    shift
  ;;
  -MPC)
    postMPC=TRUE
    shift
  ;;
  -microstructural_img)
    input_im_spec=TRUE
    input_im=$2
    shift;shift
  ;;
  -microstructural_lta)
    transform_spec=TRUE
    input_lta=$2
    shift;shift
  ;;
  -mica)
    mica=TRUE
    shift
  ;;
  -tracts)
    tracts=$2
    shift;shift
  ;;
  -unring)
    unring=TRUE
    shift;shift
  ;;
  -autoTract)
    autoTract=TRUE
    shift
  ;;
  -tmpDir)
    tmp=$2
    shift;shift;
  ;;
  -atlas)
    atlas=$2
    shift;shift;
  ;;
  -qsub)
    micaq=TRUE
    shift
  ;;
  -qall)
    qall=TRUE
    shift
  ;;
  -qtest)
    qtest=TRUE
    shift
  ;;
  -nocleanup)
    nocleanup=TRUE
    shift
  ;;
  -threads)
    threads=$2
    shift;shift
  ;;
  -force)
    force=TRUE
    shift
  ;;
  -quiet)
    quiet=TRUE
    shift
  ;;
  -*)
    Error "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done

# argument check out & WARNINGS
arg=($id $out $BIDS)
if [ "${#arg[@]}" -lt 3 ]; then
Error "One or more mandatory arguments are missing:
               -sub  : $id
               -out  : $out
               -bids : $BIDS"
help; exit 1; fi
runs=($ALL $procVOL $procFS $postVOL $procDWI $procfMRI $postDWI $postGD $postMorph $postMPC $qtest)
if [ "${#runs[@]}" -lt 1 ]; then
Error "A processing flag is missing:
                    -all
                    -proc_structural
                    -proc_freesurfer
                    -post_structural
                    -proc_dwi
                    -proc_rsfmri
                    -SC
                    -MPC
                    -GD
                    -Morphology"
help; exit 1; fi

# Optional arguments rs-fmri
optarg_rsfmri=($configFile $trainingFile $thisMainScan $thisPhase)
if [[ $configFileInput == "TRUE" ]]; then optarg_rsfmri[0]=$configFile; else optarg_rsfmri[0]=DEFAULT; fi
if [[ $icaFileInput == "TRUE" ]]; then optarg_rsfmri[1]=$trainingFile; else optarg_rsfmri[1]=DEFAULT; fi
if [[ $specMainScan == "TRUE" ]]; then optarg_rsfmri[2]=$thisMainScan; else optarg_rsfmri[2]=DEFAULT; fi
if [[ $specPhase == "TRUE" ]]; then optarg_rsfmri[3]=$thisPhase; else optarg_rsfmri[3]=DEFAULT; fi

# Optional arguments mpc
optarg_mpc=($input_im $input_lta)
if [[ $input_im_spec == "TRUE" ]]; then optarg_mpc[0]=$input_im
else optarg_mpc[0]=DEFAULT; fi
if [[ $transform_spec == "TRUE" ]]; then optarg_mpc[1]=$input_lta
else optarg_mpc[1]=DEFAULT; fi

# Optional arguments dwi
if [ -z ${unring} ]; then unring=FALSE; else unring=TRUE; fi

# Optional arguments SC
if [ -z ${tracts} ]; then tracts=20M; else tracts=$tracts; fi
if [ -z ${autoTract} ]; then autoTract=FALSE; else autoTract=TRUE; fi

# Get the real path of the Inputs
out=`realpath $out`
BIDS=`realpath $BIDS`
id=${id/sub-/}

# Number of session (Default is "ses-pre")
if [ -z ${SES} ]; then SES="ses-pre"; else SES="ses-${SES/ses-/}"; fi

# Check BIDS Directory
if [ ! -d ${BIDS}/sub-${id}/${SES} ]; then Error "$id was not found on the BIDS directory\n\t Check ls ${BIDS}/sub-${id}/${SES}"; exit 1; fi

# Erase temporal files by default
if [ -z ${nocleanup} ]; then nocleanup=FALSE; fi

# No print Do_cmd
if [ "$quiet" = "TRUE" ]; then export quiet=TRUE; fi

# Temporal directory
# if [ -z ${tmp} ]; then export tmp=/tmp; info "temp dir was unset"; else tmp=$tmp; info "temp dir was set to $tmp"; fi


# -----------------------------------------------------------------------------------------------#
Title "BIDS >> MICA processing >> proc_struct \n\t\tSubject: $id Session: $SES"

# -----------------------------------------------------------------------------------------------#
# init file for local processing at MICA lab
if [ "$micaq" = "TRUE" ] || [ "$qall" = "TRUE" ] || [ "$mica" = "TRUE" ]; then
    # Launch the init file.
    source ${MICAPIPE}/functions/init.sh
    if [[ $? != 0 ]]; then
      Error "Could not find init file. Is this script in the\n base directory of the MICAPIPE github and in init \nfile in the functions subdirectory?"; exit 1
    fi
else
    # -----------------------------------------------------------------------------------------------#
    #    PACKAGES DEPENDENCIES print versions
    # Dicom to nifti X converter
    if [[ -z `which dcm2niix` ]]; then Error "Check your dcm2niix installation"; exit 1; else Info "dcm2niix was found"; fi
    # tree display
    if [[ -z `which tree` ]]; then Warn "tree function was not found"; else Info "tree version: `tree --version | awk '{print $2}'`"; fi
    #  MRtrix3
    if [[ -z `which mrinfo` ]]; then Error "MRtrix3 was not found"; exit 1; else Info "MRtrix3 version: `mrinfo -version | awk 'NR==1 {print $3}'`"; fi
    # freesurfer
    if [[ -z `which recon-all` ]]; then Error "FreeSurfer was not found"; exit 1; else Info "FreeSurfer version: `recon-all -version`"; fi
    # FSL
    if [[ -z `which flirt` ]]; then Error "FSL was not found"; exit 1; else Info "FSL version: `flirt -version | awk '{print $3}'`"; fi
    # AFNI
    if [[ -z `which 3dresample` ]]; then Error "AFNI was not found"; exit 1; else Info "AFNI version: `afni -version | awk -F ':' '{print $2}'`"; fi
    # ANTSx
    if [[ -z `which antsRegistration` ]]; then Error "ANTs was not found"; exit 1; else Info "ANTS version: `antsRegistration --version | awk -F ':' 'NR==1{print $2}'`"; fi
    # workbench
    if [[ -z `which wb_command` ]]; then Error "WorkBench was not found"; exit 1; else Info "workbench version: `wb_command -version | awk 'NR==3{print $2}'`"; fi
    # workbench
    if [[ -z `which fix` ]]; then Warning "fix was not found, ICA-FIX will be skipped"; else Info "ICA-based Xnoiseifier was found here: `which fix`"; fi
fi

# Processing
if [[ -z $PROC ]]; then export PROC="LOCAL"; fi

# Number of THREADS used by ANTs and workbench, default is 6 if not defined by -threads
if [[ -z $threads ]]; then export threads=6; fi
Info "micapipe will use $threads threads for multicore processing"

# LOADS variables with the BIDS format
bids_variables $BIDS $id $out $SES

# Directories check
if [[ ${force} == TRUE ]]; then
  Warning "$id processing directory will be overwritten"
  rm -rf $out/${subject};
fi
if [ -d ${subject_dir} ]; then Warning "Output directory already exist, processing will continue.\n\t\t If you want to re-run everything use -force to overwrite it. \n\t\t ${subject_dir}"; fi

# -----------------------------------------------------------------------------------------------#
#			  Timer & Beginning
aloita=$(date +%s)

# -----------------------------------------------------------------------------------------------#
#   subject_dir
# Creates subject directory if it doesn't exist
if [ ! -d ${subject_dir} ]; then
    Info "Subject ${id} directory doesn't exist"
    Do_cmd mkdir -p $subject_dir/{logs,xfms,QC,proc_dwi,proc_rsfmri,proc_struct/{first,volumetric,surfaces/{conte69,$id}}}
else
    Info "Subject ${id} directory exist"
fi

# print directory  organization
if [[ ! -z `which tree` ]]; then
    if [ "$ALL" = "TRUE" ] || [ "$procVOL" = "TRUE" ]; then Info "$subject directory structure:\n"; tree -d $subject_dir; fi
fi

# -----------------------------------------------------------------------------------------------#
#                      Structural processing: Volumetric
# -----------------------------------------------------------------------------------------------#
if [ "$ALL" = "TRUE" ] || [ "$procVOL" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-volumetric_$(date +'%d-%m-%Y')
    # mica.q - Structural processing: Volumetric
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Structural processing: Volumetric"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_volumetric -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_volumetric.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    # all.q - Structural processing: Volumetric
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Structural processing: Volumetric"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N q${id}_volumetric -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_volumetric.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    else
        # LOCAL Structural processing: Volumetric
        ${scriptDir}/01_proc-struc_volumetric.sh $BIDS $id $out $SES $PROC $nocleanup $threads 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # #        Structural processing: Freesurfer
if [ "$ALL" = "TRUE" ] || [ "$procFS" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-freesurfer$(date +'%d-%m-%Y')
    # mica.q - Structural processing: Freesurfer
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Structural processing: Freesurfer"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_freesurfer -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_freesurfer.sh $BIDS $id $out $SES $PROC $nocleanup
             # all.q - Structural processing: Freesurfer
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Structural processing: Freesurfer"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N q${id}_freesurfer -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/01_proc-struc_freesurfer.sh $BIDS $id $out $SES $PROC $nocleanup
    else
        #  LOCAL - Structural processing: Freesurfer
        ${scriptDir}/01_proc-struc_freesurfer.sh $BIDS $id $out $SES $PROC $nocleanup 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # #        Diffusion processing
# -----------------------------------------------------------------------------------------------#
#  Diffusion processing
if [ "$ALL" = "TRUE" ] || [ "$procDWI" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-dwi_$(date +'%d-%m-%Y')
    # mica.q - Diffusion processing
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Diffusion processing"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_dwi -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_proc-dwi.sh $BIDS $id $out $SES $PROC $nocleanup $threads $unring
    # all.q - Diffusion processing
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Diffusion processing"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N q${id}_dwi -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_proc-dwi.sh $BIDS $id $out $SES $PROC $nocleanup $threads $unring
    else
      #  LOCAL - Diffusion processing
        ${scriptDir}/02_proc-dwi.sh $BIDS $id $out $SES $PROC $nocleanup $threads $unring 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   POST Structural processing mica-02
# -----------------------------------------------------------------------------------------------#
# # #         POST Structural processing
#     REQUIRES -proc_structural and -proc_freesurfer
if [ "$ALL" = "TRUE" ] || [ "$postVOL" = "TRUE" ]; then
    log_file_str=$dir_logs/post-structural_$(date +'%d-%m-%Y')
    # mica.q - POST Structural processing
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - POST Structural processing"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_pstStruc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_post-structural.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    # all.q - POST Structural processing
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - POST Structural processing"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N q${id}_pstStruc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_post-structural.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    else
      # LOCAL - post_structural processing
        ${scriptDir}/02_post-structural.sh $BIDS $id $out $SES $PROC $nocleanup $threads 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
# # #        Resting state
# -----------------------------------------------------------------------------------------------#
#  Resting state
if [ "$procfMRI" = "TRUE" ]; then
    log_file_str=$dir_logs/proc-rsfmri_$(date +'%d-%m-%Y')

    # mica.q - Resting state fMRI processing
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Resting state fMRI processing"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N ${id}_rsfmri -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_proc-rsfmri.sh $BIDS $id $out $SES $PROC $nocleanup "${optarg_rsfmri[0]}" "${optarg_rsfmri[1]}" "${optarg_rsfmri[2]}" "${optarg_rsfmri[3]}" $threads
    # all.q - Resting state fMRI processing
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Resting state fMRI processing"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N ${id}_rsfmri -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/02_proc-rsfmri.sh $BIDS $id $out $SES $PROC $nocleanup "${optarg_rsfmri[0]}" "${optarg_rsfmri[1]}" "${optarg_rsfmri[2]}" "${optarg_rsfmri[3]}" $threads
    else
        # LOCAL - Resting state fMRI processing
        ${scriptDir}/02_proc-rsfmri.sh $BIDS $id $out $SES $PROC $nocleanup "${optarg_rsfmri[0]}" "${optarg_rsfmri[1]}" "${optarg_rsfmri[2]}" "${optarg_rsfmri[3]}"  $threads 2>&1 | tee -a  ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#       post-DWI processing (tractography)
# -----------------------------------------------------------------------------------------------#
#   REQUIRES -proc_dwi
if [ "$ALL" = "TRUE" ] || [ "$postDWI" = "TRUE" ]; then
    log_file_str=$dir_logs/post-dwi_$(date +'%d-%m-%Y')
    # mica.q - post-DWI processing (tractography)
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - POST DWI processing (tractography)"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp 20-40 -l h_vmem=1.5G -N q${id}_pstDWI -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_SC.sh $BIDS $id $out $SES $PROC $nocleanup $tracts $autoTract $threads
    # all.q - post-DWI processing (tractography)
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - POST DWI processing (tractography)"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe 20-40 -l h_vmem=1.5G -N q${id}_pstDWI -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_SC.sh $BIDS $id $out $SES $PROC $nocleanup $tracts $autoTract $threads
    else
        # LOCAL - post-DWI processing (tractography)
        ${scriptDir}/03_SC.sh $BIDS $id $out $SES $PROC $nocleanup $tracts $autoTract $threads 2>&1 | tee -a ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   POST Geodesic distance mica-03
# -----------------------------------------------------------------------------------------------#
#     Generates geodesic distance matrices calculated along cortical surface mesh
#     REQUIRES -post-structural and -proc_freesurfer
if [ "$ALL" = "TRUE" ] || [ "$postGD" = "TRUE" ]; then
    log_file_str=$dir_logs/post-gd_$(date +'%d-%m-%Y')
    # mica.q - Geodesic distance
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Geodesic distance"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_gd -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_GD.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    # all.q - Geodesic distance
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Geodesic distance"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N q${id}_gd -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_GD.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    else
        # LOCAL - Geodesic distance processing
        ${scriptDir}/03_GD.sh $BIDS $id $out $SES $PROC $nocleanup $threads 2>&1 | tee -a  ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   POST Cortical morphology analyses mica-03
# -----------------------------------------------------------------------------------------------#
#     Quantitative outputs for cortical morphology analyses: Thickness, curvature, mean qT1
#     REQUIRES -post-structural, -proc_freesurfer, and -postMPC
if [ "$ALL" = "TRUE" ] || [ "$postMorph" = "TRUE" ]; then
    log_file_str=$dir_logs/post-morph_$(date +'%d-%m-%Y')
    # mica.q - Morphology
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Cortical Morphology"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_morpho -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_morphology.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    # all.q - Morphology
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Cortical Morphoogy"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N q${id}_morpho -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_morphology.sh $BIDS $id $out $SES $PROC $nocleanup $threads
    else
        # LOCAL - Morphology
        ${scriptDir}/03_morphology.sh $BIDS $id $out $SES $PROC $nocleanup $threads 2>&1 | tee -a  ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   POST Microstructural profile covariance mica-03
# -----------------------------------------------------------------------------------------------#
#     Generates microstructural profiles and covariance matrices
#     REQUIRES -proc_structural and -proc_freesurfer
if [ "$ALL" = "TRUE" ] || [ "$postMPC" = "TRUE" ]; then
    log_file_str=$dir_logs/post-mpc_$(date +'%d-%m-%Y')
    # mica.q - Microstructural profile covariance
    if [[ $micaq == "TRUE" ]] ; then
        Info "MICA qsub - Microstructural profile covariance"
        Warning "This option only works on the MICA workstations"
        export PROC="qsub-MICA"
        # Info "Setting a warper to run on mica.q"
        qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_mpc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_MPC.sh $BIDS $id $out $SES $PROC "${optarg_mpc[0]}" "${optarg_mpc[1]}" $nocleanup $threads
    # all.q - Microstructural profile covariance
    elif [[ $qall == "TRUE" ]] ; then
        Info "all.q qsub - Microstructural profile covariance"
        Warning "This option only works on the McGill BIC network"
        export PROC="qsub-all.q"
        # Info "Setting a warper to run on all.q"
        qsub -q all.q -pe all.pe $threads -l h_vmem=6G -N q${id}_mpc -e ${log_file_str}.e -o ${log_file_str}.txt \
             ${scriptDir}/03_MPC.sh $BIDS $id $out $SES $PROC "${optarg_mpc[0]}" "${optarg_mpc[1]}" $nocleanup $threads
    else
        # LOCAL - POST-Structural processing
        ${scriptDir}/03_MPC.sh $BIDS $id $out $SES $PROC "${optarg_mpc[0]}" "${optarg_mpc[1]}" $nocleanup $threads 2>&1 | tee -a  ${log_file_str}.txt
    fi
fi

# -----------------------------------------------------------------------------------------------#
#                   MICA - qsub test
# -----------------------------------------------------------------------------------------------#
if [[ $qtest = "TRUE" ]] && [[ $micaq == "TRUE" ]]; then
      log_file_str=/data_/mica3/BIDS_MIC/qTEST/${id}_$(date +'%d-%m-%Y')
      Info "MICA qsub test: mica.q"
      export PROC="qsub-MICA"
      # Info "Setting a warper to run on mica.q"
      qsub -q mica.q -pe smp $threads -l h_vmem=6G -N q${id}_micaqTEST -e ${log_file_str}_${PROC}.e -o ${log_file_str}_${PROC}.txt \
           ${scriptDir}/micapipe_qsub-test $BIDS $id $out $SES $PROC $nocleanup $threads
fi
# # # MICA - qsub test
if [[ $qtest = "TRUE" ]] && [[ $qall == "TRUE" ]]; then
      Info "MICA qsub test: all.q"
      export PROC="qsub-all.q"
      # Info "Setting a warper to run on all.q"
      qsub -q all.q -pe all.pe 30 -l h_vmem=6G -N q${id}_micaqTEST -e ${log_file_str}_${PROC}.e -o ${log_file_str}_${PROC}.txt \
           ${scriptDir}/micapipe_qsub-test $BIDS $id $out $SES $PROC $nocleanup $threads
fi
if [[ $qtest = "TRUE" ]]; then
      Info "LOCAL setup test"
      ${scriptDir}/micapipe_qsub-test $BIDS $id $out $SES $PROC $nocleanup $threads 2>&1 | tee -a ${id}_$(date +'%d-%m-%Y')_${PROC}.txt
fi

# -----------------------------------------------------------------------------------------------#
#			 Total Running Time
lopuu=$(date +%s)
eri=$(echo "$lopuu - $aloita" | bc)
eri=`echo print $eri/60 | perl`

# Return the original PATH if qsub || mica=TRUE
if [ ! -z ${OLD_PATH+x} ]; then cleanup; fi

Title "TOTAL running time:\033[38;5;220m `printf "%0.3f\n" ${eri}` minutes \033[38;5;141m"
