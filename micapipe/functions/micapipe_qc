#!/bin/bash
#
# MICA pipe Quality Check script
#
# This script will create a basic html file for QC of the processing
#

#
#   ARGUMENTS order:
#   $1 : BIDS directory
#   $2 : participant
#   $3 : Out parcDirectory
#
# ONLY for scripting and debugging:
# TEST=ON

#---------------- FUNCTION: HELP ----------------#
help() {
echo -e "
\033[38;5;141mCOMMAND:\033[0m
`basename $0`
\033[38;5;141mARGUMENTS:\033[0m
\t\033[38;5;197m-sub\033[0m 	          : Subject identification
\t\033[38;5;197m-out\033[0m 	          : Output directory for the processed files <derivatives>.
\t\033[38;5;197m-bids\033[0m 	          : Path to BIDS directory
\t\033[38;5;120m-ses <str>\033[0m 	  : OPTIONAL flag that indicates the session name (default = ses-pre)
\t\033[38;5;120m-tracts <int>\033[0m     : OPTIONAL Number of streamlines, where 'M' stands for millions (default=40M)
\033[38;5;141mOPTIONS:\033[0m
\t\033[38;5;197m-h|-help\033[0m          : Print help
\t\033[38;5;197m-quiet\033[0m 	          : Do not print comments
\033[38;5;141mUSAGE:\033[0m
    \033[38;5;141m`basename $0`\033[0m \033[38;5;197m-sub\033[0m <subject_id> \033[38;5;197m-out\033[0m <outputDirectory> \033[38;5;197m-bids\033[0m <BIDS-directory>\n
\033[38;5;141mDEPENDENCIES:\033[0m
McGill University, MNI, MICA-lab, May-September 2020
https://github.com/MICA-MNI/micapipe
http://mica-mni.github.io/
"
}

# Check MICAPIPE
if [ -z "${MICAPIPE}" ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE must be define in your enviroment\033[0m
           TRY: export MICAPIPE=<github_Directory>/micasoft\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

if [ ! -f ${MICAPIPE}/functions/utilities.sh ]; then
echo -e "\033[38;5;1m\n---------------------------------------------------------\n
[ERROR]... MICAPIPE is defined, but the PATH is wrong,
           it should match /micasoft directory\033[0m
           CHECK PATH to MICAPIPE:
           $MICAPIPE\n
\033[38;5;1m---------------------------------------------------------\033[0m\n"; exit 1
fi

# Source utilities functions from MICAPIPE
source ${MICAPIPE}/functions/utilities.sh

# -----------------------------------------------------------------------------------------------#
#			ARGUMENTS
# Create VARIABLES
for arg in "$@"
do
  case "$arg" in
  -h|-help)
    help
    exit 1
  ;;
  -sub)
    id=$2
    shift;shift
  ;;
  -out)
    out=$2
    shift;shift
  ;;
  -bids)
    BIDS=$2
    shift;shift
  ;;
  -ses)
    SES=$2
    shift;shift
  ;;
  -tracts)
    tracts=$2
    shift;shift
  ;;
  -*)
    Error "Unknown option ${2}"
    help
    exit 1
  ;;
    esac
done

# argument check out & WARNINGS
arg=($id $out $BIDS)
if [ "${#arg[@]}" -lt 3 ]; then
Error "One or more mandatory arguments are missing:
               -sub  : $id
               -out  : $out
               -bids : $BIDS"
help; exit 1; fi

# Get the real path of the Inputs
id=${id/sub-/}
out=`realpath $out`
BIDS=`realpath $BIDS`

# Number of session (Default is "ses-pre")
if [ -z ${SES} ]; then SES="ses-pre"; else SES="ses-${SES/ses-/}"; fi

# Exit if subject is not found
if [ ! -d ${out}/sub-${id}/${SES} ]; then Error "$id was not found on the OUTPUT directory\n\t Check ls ${out}/sub-${id}/${SES}"; exit 1; fi

# Optional arguments number of tracts
if [ -z ${tracts} ]; then tracts=40M; else tracts=$tracts; fi

# Assigns variables names
bids_variables $BIDS $id $out $SES

# Variables
parcellations=`find ${dir_volum} -name "*.nii.gz" ! -name "*cerebellum*" ! -name "*subcortical*" | sort`

#------------------------------------------------------------------------------#
Title "MICAPIPE: Creating a QC html file for $id"
micapipe_software
bids_print.variables
bids_print.variables-post
bids_print.variables-dwi
bids_print.variables-rsfmri

# Individual QC html file
QC_html=${dir_QC}/${id}_micapipe_qc.html
px=200px
table_style=" <style type=\"text/css\">
  .tg  {border-collapse:collapse;border-spacing:0;}
  .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
    overflow:hidden;padding:10px 5px;word-break:normal;}
  .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
    font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
  .tg .tg-rkbl{background-color:#ecf4ff;border-color:#ffffff;color:#000000;
    font-family:\"Trebuchet MS\", Helvetica, sans-serif !important;;text-align:center;vertical-align:middle}
  .tg .tg-wk8r{background-color:#ffffff;border-color:#ffffff;text-align:center;vertical-align:center}
  .tg .tg-droi{background-color:#ecf4ff;border-color:#ffffff;color:#656565;
    font-family:\"Trebuchet MS\", Helvetica, sans-serif !important;;text-align:center;vertical-align:middle}
  .tg .tg-8hoh{background-color:#c0c0c0;border-color:inherit;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px;
    text-align:center;vertical-align:top}
  .tg .tg-dp6t{border-color:inherit;font-family:\"Courier New\", Courier, monospace !important;;font-size:16px;text-align:center;
    vertical-align:top}
  .tg .tg-8pnm{background-color:#ffffff;border-color:#ffffff;color:#333333;font-family:\"Courier New\", Courier, monospace !important;;
    font-size:16px;text-align:left;vertical-align:top}
  </style>"

#	Timer
aloita=$(date +%s)

echo "<!doctype html>
<html>
<head>
  <meta charset=\"utf-8\">
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
  <title> MICAPIPE QC - ${id}_${SES}</title>
  <link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">
  <link rel=\"stylesheet\" href=\"/resources/demos/style.css\">
  <script src=\"https://code.jquery.com/jquery-1.12.4.js\"></script>
  <script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.js\"></script>
  <script>
  \$( function() {
  \$( \"#accordion\" ).accordion({collapsible:true, active:false});
  } );
  </script>
  <style>
    h1 {color:#343434;font-family:\"Trebuchet MS\", Helvetica, sans-serif !important;;text-align:center;}
    h2 {color:#656565;font-family:\"Trebuchet MS\", Helvetica, sans-serif !important;;}
    h3 {color:#343434;font-family:\"Trebuchet MS\", Helvetica, sans-serif !important;;}
    p {color:#656565;font-family:\"Trebuchet MS\", Helvetica, sans-serif !important;;}
    a {color:#343434;font-family:\"Trebuchet MS\";}
  </style>
</head>
<body>
<br>
<img src=\"${MICAPIPE}/docs/figures/micapipe_long.png\" style=\"width:1400px\">
<h1> Quality Check - Subject: ${id} - Session: ${SES}</h1>
" >  $QC_html

#------------------------------------------------------------------------------#
# Table of content
echo -e "
  <h2>Table of Contents</h2>
    <a href=\"#Completed workflow\">Completed workflow</a><br>
    <a href=\"#Structural processing -proc_structural\">First stage: Structural processing</a><br>
    <a href=\"#Freesurfer processing -proc_freesurfer\">First stage: Freesurfer processing</a><br>
    <a href=\"#Post-structural processing -post_structural\">Second stage: Post-structural processing</a><br>
    <a href=\"#Diffusion MRI processing -proc_dwi\">Second stage: Diffusion MRI processing</a><br>
    <a style=\"margin-left: 2rem;\" href=\"#Motion parameters\">Motion parameters</a><br>
    <a style=\"margin-left: 2rem;\" href=\"#Noise estimation\">Noise estimation</a><br>
    <a href=\"#Resting state fMRI -proc_rsfmri\">Second stage: Resting state fMRI</a><br>
    <a style=\"margin-left: 2rem;\" href=\"#Functional connectomes\">Functional connectomes</a><br>
    <a href=\"#Structural Connectomes -SC\">Third stage: Structural Connectomes</a><br>
    <a href=\"#Micro structural profiles -MPC and Geodesic distance (-GD)\">Third stage: Micro structural profiles and Geodesic distance</a><br>
    <a href=\"#Cortical morphology -Morphology\">Third stage: Cortical morphology analysis</a><br>" >> $QC_html
if [ -d "$autoTract_dir" ]; then
echo -e "    <a href=\"#Auto tractography -autoTract\">Third stage: Auto tractography</a><br>" >> $QC_html
fi

#------------------------------------------------------------------------------#
# MICAPIPE processing flowchart
echo "
<div id=\"accordion\">
  <h2>Completed workflow</h2>
  <div>
    <p>... work in progress ...</p>
  </div>" >> $QC_html

#------------------------------------------------------------------------------#
# MICAPIPE Processing Modules QC
# QC rsfMRI
# /data_/mica3/BIDS_MIC/derivatives/sub-HC011/ses-01/proc_rsfmri/surfaces
# Include html into html: https://stackoverflow.com/questions/8988855/include-another-html-file-in-a-html-file
echo "  <h2>Structural processing -proc_structural</h2>
  <div>
    <h3>Input files</h3>" >> $QC_html
    echo -e $table_style >> $QC_html
    echo -e "
        <table class=\"tg\">
          <thead>
            <tr>
              <th class=\"tg-rkbl\">Variable name</th>
              <th class=\"tg-droi\">Origin</th>
              <th class=\"tg-droi\">Path to file</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">t1ref</span></td>
              <td class=\"tg-8pnm\">BIDS anat<br><br></td>
              <td class=\"tg-8pnm\">${bids_T1ws[0]}</td>
            </tr>
            " >> $QC_html
N=${#bids_T1ws[@]}
n=$((${N} - 1))
if [ "$N" -gt 1 ]; then
  for ((i=1; i<=$n; i++)); do
    echo "
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1run_$((${i}+1))</span></td>
              <td class=\"tg-8pnm\">BIDS anat<br><br></td>
              <td class=\"tg-8pnm\">${bids_T1ws[$i]}</td>
            </tr>" >> $QC_html
  done
fi
    echo -e "
          </tbody>
          </table>
  </div>"  >> $QC_html

#------------------------------------------------------------------------------#
echo "  <h2>Freesurfer processing -proc_freesurfer</h2>
  <div>
    <h3>Input files</h3>" >> $QC_html
    echo -e $table_style >> $QC_html
    echo -e "
        <table class=\"tg\">
          <thead>
            <tr>
              <th class=\"tg-rkbl\">Variable name</th>
              <th class=\"tg-droi\">Origin</th>
              <th class=\"tg-droi\">Path to file</th>
            </tr>
          </thead>
          <tbody>" >> $QC_html
N=${#bids_T1ws[@]}
n=$((${N} - 1))
if [ "$N" -gt 1 ]; then
  for ((i=0; i<=$n; i++)); do
    echo "
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">bids_T1ws[${i}]</span></td>
              <td class=\"tg-8pnm\">BIDS anat<br><br></td>
              <td class=\"tg-8pnm\">${bids_T1ws[$i]}</td>
            </tr>" >> $QC_html
  done
fi
    echo -e "
          </tbody>
          </table>
  </div>"  >> $QC_html
# $QA_TOOLS/recon_checker -help
# https://surfer.nmr.mgh.harvard.edu/fswiki/QATools

#------------------------------------------------------------------------------#
# POST-STRUCTRURAL QC
mat_MNI152_SyN=${dir_warp}/${T1str_nat}_brain_to_0.8mm_MNI152_SyN_brain_    # transformation strings nativepro to MNI152_0.8mm
T1_MNI152_InvWarp=${mat_MNI152_SyN}1InverseWarp.nii.gz                      # Inversewarp - nativepro to MNI152_0.8mm
T1_MNI152_affine=${mat_MNI152_SyN}0GenericAffine.mat

echo "  <h2>Post-structural processing -post_structural</h2>
  <div>
  <h3>Input files</h3>" >> $QC_html
  echo -e $table_style >> $QC_html
  echo -e "      <table class=\"tg\">
        <thead>
          <tr>
            <th class=\"tg-rkbl\">Variable name</th>
            <th class=\"tg-droi\">Origin</th>
            <th class=\"tg-droi\">Path to file</th>
          </tr>
          <tr>
            <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1freesurfr</span></td>
            <td class=\"tg-8pnm\">proc_freesurfer<br><br></td>
            <td class=\"tg-8pnm\">${T1freesurfr}</td>
          </tr>
          <tr>
            <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1nativepro</span></td>
            <td class=\"tg-8pnm\">proc_structural<br><br></td>
            <td class=\"tg-8pnm\">${proc_struct}/${id}_t1w_${res}mm_nativepro.nii.gz</td>
          </tr>
            <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1fast_seg</span></td>
            <td class=\"tg-8pnm\">proc_structural<br><br></td>
            <td class=\"tg-8pnm\">$(find $T1fast_seg 2>/dev/null)</td>
          </tr>
          <tr>
            <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1_MNI152_InvWarp</span></td>
            <td class=\"tg-8pnm\">proc_structural<br><br></td>
            <td class=\"tg-8pnm\">$(find $T1_MNI152_InvWarp 2>/dev/null)</td>
          </tr>
          <tr>
            <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1_MNI152_affine</span></td>
            <td class=\"tg-8pnm\">proc_structural<br><br></td>
            <td class=\"tg-8pnm\">$(find $T1_MNI152_affine 2>/dev/null)</td>
          </tr>" >> $QC_html
          echo -e "
                </tbody>
                </table>"  >> $QC_html
#------------------------------------------------------------------------------#
echo -e "<h3>Output volumetric parcellations</h3>" >> $QC_html
echo -e $table_style >> $QC_html
echo -e "      <table class=\"tg\">
      <thead>
        <tr>
          <th class=\"tg-rkbl\">Parcellation</th>
          <th class=\"tg-droi\">Path to file</th>
        </tr>" >> $QC_html
# Prepare the segmentatons
parcellations=`find ${dir_volum} -name "*.nii.gz" ! -name "*cerebellum*" ! -name "*subcortical*"`
for seg in $parcellations; do
    parc_name=`echo ${seg/.nii.gz/} | awk -F 'nativepro_' '{print $2}'`
    echo -e "
              <tr>
                <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">${parc_name}</span></td>
                <td class=\"tg-8pnm\">${seg}</td>
              </tr>"  >> $QC_html
done
echo -e "
      </tbody>
      </table>
    </div>" >> $QC_html

#------------------------------------------------------------------------------#
echo "
<h2>Diffusion MRI processing -proc_dwi</h2>
  <div>
    <h3>Input files</h3>" >> $QC_html
    echo -e $table_style >> $QC_html
    echo -e "
        <table class=\"tg\">
          <thead>
            <tr>
              <th class=\"tg-rkbl\">Variable name</th>
              <th class=\"tg-droi\">Origin</th>
              <th class=\"tg-droi\">Path to file</th>
            </tr>
          </thead>
          <tbody>" >> $QC_html
    N=${#bids_dwis[@]}
    n=$((${N} - 1))
    if [ "$N" -gt 1 ]; then
      for ((i=0; i<=$n; i++)); do
      echo "
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">bids_dwis[${i}]</span></td>
              <td class=\"tg-8pnm\">BIDS dwi<br><br></td>
              <td class=\"tg-8pnm\">${bids_dwis[$i]}</td>
            </tr>" >> $QC_html
      done
    fi
    if [ -f $dwi_reverse ]; then
      echo -e "
              <tr>
                <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">dwi_reverse</span></td>
                <td class=\"tg-8pnm\">BIDS dwi<br><br></td>
                <td class=\"tg-8pnm\">$(find $dwi_reverse 2>/dev/null)</td>
              </tr>"  >> $QC_html
    fi
    echo -e "
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1nativepro</span></td>
              <td class=\"tg-8pnm\">proc_structural<br><br></td>
              <td class=\"tg-8pnm\">$(find $T1nativepro 2>/dev/null)</td>
            </tr>
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1_MNI152_InvWarp</span></td>
              <td class=\"tg-8pnm\">proc_structural<br><br></td>
              <td class=\"tg-8pnm\">$(find $T1_MNI152_InvWarp 2>/dev/null)</td>
            </tr>
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1_MNI152_affine</span></td>
              <td class=\"tg-8pnm\">proc_structural<br><br></td>
              <td class=\"tg-8pnm\">$(find $T1_MNI152_affine 2>/dev/null)</td>
            </tr>
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T15ttgen</span></td>
              <td class=\"tg-8pnm\">proc_structural<br><br></td>
              <td class=\"tg-8pnm\">$(find $T15ttgen 2>/dev/null)</td>
            </tr>
          </tbody>
          </table>"  >> $QC_html
echo "    <h3>Motion parameters</h3>" >> $QC_html
echo "    <h3>Noise estimation</h3>" >> $QC_html
echo "  </div>" >> $QC_html

#------------------------------------------------------------------------------#
# RESTING STATE
echo "
  <h2>Resting state fMRI -proc_rsfmri</h2>
  <div>
    <h3>Input files</h3>" >> $QC_html
    echo -e $table_style >> $QC_html
    echo -e "
        <table class=\"tg\">
          <thead>
            <tr>
              <th class=\"tg-rkbl\">Variable name</th>
              <th class=\"tg-droi\">Origin</th>
              <th class=\"tg-droi\">Path to file</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">bids_mainScan</span></td>
              <td class=\"tg-8pnm\">BIDS func<br><br></td>
              <td class=\"tg-8pnm\">$(find $bids_mainScan 2>/dev/null)</td>
            </tr>
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">bids_mainScanJson</span></td>
              <td class=\"tg-8pnm\">BIDS func<br><br></td>
              <td class=\"tg-8pnm\">$(find $bids_mainScanJson 2>/dev/null)</td>
            </tr>
            <tr>
              <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">bids_mainPhase</span></td>
              <td class=\"tg-8pnm\">BIDS func<br><br></td>
              <td class=\"tg-8pnm\">$(find $bids_mainPhase 2>/dev/null)</td>
            </tr>
          " >> $QC_html
          if [ -f $bids_reversePhase ]; then
            echo -e "
                    <tr>
                      <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">bids_reversePhase</span></td>
                      <td class=\"tg-8pnm\">BIDS func<br><br></td>
                      <td class=\"tg-8pnm\">$(find $bids_reversePhase 2>/dev/null)</td>
                    </tr>"  >> $QC_html
          fi
          echo -e "
                  <tr>
                    <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1nativepro</span></td>
                    <td class=\"tg-8pnm\">proc_structural<br><br></td>
                    <td class=\"tg-8pnm\">$(find $T1nativepro 2>/dev/null)</td>
                  </tr>
                  <tr>
                    <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">T1freesurfr</span></td>
                    <td class=\"tg-8pnm\">proc_freesurfer<br><br></td>
                    <td class=\"tg-8pnm\">$(find $T1freesurfr 2>/dev/null)</td>
                  </tr>
                  <tr>
                    <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">topupConfigFile</span></td>
                    <td class=\"tg-8pnm\">DEFAULT<br><br></td>
                    <td class=\"tg-8pnm\">$(find $topupConfigFile 2>/dev/null)</td>
                  </tr>
                  <tr>
                    <td class=\"tg-8pnm\"><span style=\"font-weight:bold\">icafixTraining</span></td>
                    <td class=\"tg-8pnm\">DEFAULT<br><br></td>
                    <td class=\"tg-8pnm\">$(find $icafixTraining 2>/dev/null)</td>
                  </tr>
                </tbody>
                </table>"  >> $QC_html

echo "    <h3>Functional connectomes</h3>" >> $QC_html
echo -e $table_style >> $QC_html
echo -e "
    <table class=\"tg\">
      <thead>
        <tr>
          <th class=\"tg-rkbl\">Parcellation<br>scheme</th>
          <th class=\"tg-droi\">Functional <br>connectome</th>
          <th class=\"tg-droi\">FC conte69</th>
        </tr>
      </thead>
      <tbody>" >> $QC_html

# iterate over each FC png file
Nconn=$(ls ${dir_QC_png}/*_FC*.png 2>/dev/null | wc -l)
if [ ! "$Nconn" -eq 0 ]; then
  for seg in $parcellations; do
      parc_name=`echo ${seg/.nii.gz/} | awk -F 'nativepro_' '{print $2}'`
      echo -e " <tr>
            <td class=\"tg-droi\">${parc_name}</td>"  >> $QC_html
      for ext in FC FC-conte69; do
          nom=${dir_QC_png}/${id}_${parc_name}_${ext}.png
          if [ -f "$nom" ]; then
              echo "            <td class=\"tg-wk8r\"><img src=\"${nom}\"  alt=\"HTML5\" style=\"width:${px};height:${px}\"></td>" >> $QC_html
          else
              echo "            <td class=\"tg-8hoh\"><br><br><span style=\"font-weight:bold\">File Not Found:</span><br><br><span style=\"font-weight:bold\">\"${id}_${parc_name}_${ext}.png\"</span><br><br></td>"  >> $QC_html
          fi
      done
      echo "  </tr>" >> $QC_html
  done
else
  echo "  <p> ...Not processed yet... </p>" >>  $QC_html
fi
# Close functional connectome QC table
echo -e "
    </tbody>
    </table>
   </div>
 "  >> $QC_html

#------------------------------------------------------------------------------#
echo "  <h2>Micro structural profiles -MPC and Geodesic distance -GD</h2>
  <div>
    <h3>Input files -MPC</h3>" >> $QC_html
#------------------------------------------------------------------------------#
echo -e "    <h3>Input files -GD</h3>"  >> $QC_html
#------------------------------------------------------------------------------#
echo -e "    <h3>Connectomes</h3>"  >> $QC_html
echo -e $table_style >> $QC_html
echo -e " <table class=\"tg\">
  <thead>
    <tr>
      <th class=\"tg-rkbl\">Parcellation<br>scheme</th>
      <th class=\"tg-droi\">MPC Connectome</th>
      <th class=\"tg-droi\">MPC Intensity</th>
      <th class=\"tg-droi\">Geodesic <br>Distance</th>
    </tr>
  </thead>
  <tbody>" >> $QC_html

# Iterate over all the parcellation
for seg in $parcellations; do
    parc_name=`echo ${seg/.nii.gz/} | awk -F 'nativepro_' '{print $2}'`
    echo -e " <tr>
          <td class=\"tg-droi\">${parc_name}</td>"  >> $QC_html
    for ext in MPC MPC-intensity GD; do
        Nfiles=$(ls ${dir_QC_png}/*_${ext}.png 2>/dev/null | wc -l)
        # echo "Nfiles=$Nfiles Modality=$ext"
        if [ "$Nfiles" -eq 0 ]; then
            Message="\"tg-dp6t\"><br><br><span style=\"font-weight:bold\">>>>   Module not   <<<</span><br><span style=\"font-weight:bold\">processed:</span><br><span style=\"font-weight:bold\">-${ext/-intensity/}";
        else
            Message="\"tg-8hoh\"><br><br><span style=\"font-weight:bold\">File Not Found:</span><br><br><span style=\"font-weight:bold\">\"${id}_${parc_name}_${ext}.png\"";
        fi
        nom=${dir_QC_png}/${id}_${parc_name}_${ext}.png
        if [ -f "$nom" ]; then
            echo "            <td class=\"tg-wk8r\"><img src=\"${nom}\"  alt=\"HTML5\" style=\"height:${px}\"></td>" >> $QC_html
        else
            echo "            <td class=${Message}</span><br><br></td>"  >> $QC_html
        fi
    done
    echo "  </tr>" >> $QC_html
done

# Close MPC and GD QC table
echo -e "
  </tbody>
  </table>
  </div>
"  >> $QC_html

#------------------------------------------------------------------------------#
# Diffusion processing MRI
echo -e "
  <h2>Structural Connectomes -SC</h2>
  <div>
    <h3>Input files</h3>" >> $QC_html
echo -e $table_style >> $QC_html
echo -e "
      <table class=\"tg\">
      <thead>
        <tr>
          <th class=\"tg-rkbl\">Parcellation<br>scheme</th>
          <th class=\"tg-droi\">Cortical <br>connectome</th>
          <th class=\"tg-droi\">Cortical-Subcortical <br>Connectome</th>
          <th class=\"tg-droi\">Full <br>Connectome</th>
          <th class=\"tg-droi\">Cortical <br>Edge lengths</th>
          <th class=\"tg-droi\"><span style=\"font-style:normal\">Cortical-Subcortical </span><br><span style=\"font-style:normal\">Edge lengths</span></th>
          <th class=\"tg-droi\"><span style=\"font-style:normal\">Full </span><br><span style=\"font-style:normal\">Edge lengths</span></th>
        </tr>
      </thead>
      <tbody>" >> $QC_html

# Iterate over all the parcellation
Nconn=$(ls ${dir_QC_png}/*connectome.png 2>/dev/null | wc -l)
if [ ! "$Nconn" -eq 0 ]; then
  for seg in $parcellations; do
      parc_name=`echo ${seg/.nii.gz/} | awk -F 'nativepro_' '{print $2}'`
      echo -e " <tr>
            <td class=\"tg-droi\">${parc_name}</td>"  >> $QC_html
      for ext in cor-connectome sub-connectome full-connectome cor-edgeLengths sub-edgeLengths full-edgeLengths; do
          nom=${dir_QC_png}/${id}_${tracts}_${parc_name}_${ext}.png
          if [ -f "$nom" ]; then
              echo "            <td class=\"tg-wk8r\"><img src=\"${nom}\"  alt=\"HTML5\" style=\"width:${px};height:${px}\"></td>" >> $QC_html
          else
              echo "            <td class=\"tg-8hoh\"><br><br><span style=\"font-weight:bold\">File Not Found:</span><br><br><span style=\"font-weight:bold\">\"${id}_${tracts}_${parc_name}_${ext}.png\"</span><br><br></td>"  >> $QC_html
          fi
      done
      echo "  </tr>" >> $QC_html
  done
else
  echo "  <p> ...Not processed yet... </p>" >> $QC_html
fi

# Close Structural connectome QC table
echo -e "
      </tbody>
      </table>
  </div>
"  >> $QC_html

#------------------------------------------------------------------------------#
echo "
  <h2>Cortical morphology -Morphology</h2>
  <div>
    <h3>Input files</h3>
    <p>... work in progress ...</p>
  </div>" >> $QC_html

#------------------------------------------------------------------------------#
# Do autotract only if dir exists
if [ -d "$autoTract_dir" ]; then
  echo "
    <h2>Auto tractography -autoTract</h2>
    <div>
      <h3>Input files</h3>
      <p>... work in progress ...</p>
    </div>" >> $QC_html
fi
#------------------------------------------------------------------------------#
# closes html document
echo "
</div>
</body>
</html>" >> $QC_html

# -----------------------------------------------------------------------------------------------
# QC notification of completition
lopuu=$(date +%s)
eri=$(echo "$lopuu - $aloita" | bc)
eri=`echo print $eri/60 | perl`

Title "QC html creation ended in \033[38;5;220m `printf "%0.3f\n" ${eri}` minutes \033[38;5;141m:
\t\tOutput file path: $QC_html"
bids_variables_unset
